#삽입정렬  --> 삽입법  // 그 전에 배웠던 정렬은 교환법
# 삽입정렬은 이미 정렬된 파일에 새로운 데이터를 위치에 맞게 삽입한다.
#정렬할 데이터가 n개일 경우 n-1번 회전한다.
'''
삽입 정렬은 큰값과 작은 값을 교환하는게 아니라 삽입하는거다.
i는 삽입할 데이터 위치, j는 삽입할 데이터와 비교할 위치
정렬된 파일에 삽입할 데이터를 key에 삽입할 데이터의 위치를 index에 넣는다.
key에 저장된 데이터와 이미 정렬된 파일(선택된 i)의 마지막 인덱스 위치의 데이터부터
첫 번째 데이터 방향으로 비교한다.(2번 인덱스가 선택 되면 0 1번 인덱스랑 비교한다는 뜻)
key에 저장된 데이터가 이미 정렬된 데이터 보다 작으면 정렬된 파일의 데이터를 다음 위치로 보내고
index를 1 감소 시킨다.
비교 작업이 모두 완료된 후 key에 저장된 데이터를 index번째 위치에 넣어준다.
--> 녹화영상 참고
'''
data=[8,3,4,9,1]
for i in range(1,len(data)):  #--> 인덱스 1부터 시작 0번은 이미 정렬된 데이터로 간주
    # 이미 정렬된 파일에 새 데이터가 삽입 될 위치를 찾기 위해서 새 데이터와 인덱스를 각각 key와 index에 저장한다
    key=data[i]
    index=i
    # 새 데이터가 삽입될 위치를 찾는다
    for j in range(i-1,-1,-1): # 비교하는 데이터는 항상 자기보다 하나 작은 인덱스 부터
    # 0번째 까지 하나씩 작아지면서 내려감
        if data[j] > key : # key 보다 앞의 데이터가 큰가?
            # 이미 정렬된 파일의 데이터가 크기 때문에 정렬된 파일의 데이터를 인덱스가 1 큰 위치로 이동
            # 삽입할 데이터의 인덱스를 1 감소
            data[j+1]=data[j]
            index-=1
        else: # 키가 더 클 때 그러면 더이상 비교할 필요 없음 왜냐면 앞에는 이미 정렬 되어 있는데 비교 값보다 key값이 크면
            # 그 앞에 정렬된 것과는 비교할 필요가 없다 더 작기 때문에
            # 탈출한다
            break
            # 새 데이터를(key)를 정렬된 파일에서 index 에 맞게 삽입한다.
    data[index]=key
    print('{}회전 결과 : {}'.format(i,data))

print('정렬 결과 : {}'.format(data))

# 셸 정렬(shellSort) --> 삽입정렬에 상위호환 삽입정렬의 확장 개념
'''
전체 데이터를 계속 반으로 나누는 정렬 방식  --> 회전수 로그2의N
중간 값을 찾아서 중간 값과 맨 처음 값과 비교 시작
중간 값+1 과  맨처음값 +1 과 비교 ... 이런 식으로 마지막 까지 비교
이게 1 회전
그 다음에 2회전
처음에는 전체의 중간값 그다음 2회 전은 앞에 남아있던 개수의 중간값 즉 (8칸이였으면 첫번째는 4번 두번째는 2번 인덱스 시작)
또 다시 중간 값+1 과  맨처음값 +1 과 비교 ... 이런 식으로 마지막 까지 비교
그런데 만일 값이 바뀌었으면 바뀐 값(앞으로 온 값) 앞에 또다시 중간값 개수 만큼 있으면 다시 비교 해서 바꿀지 안바꿀지 결정
즉  4 번 2번 인덱스 바뀌면 2번앞에 0번이 또 2칸 차이로 있으므로 다시 비교
이런식으로 쭉 중간 중간 하면서 1칸 차이까지 비교 해주면 된다.
---> 영상 보면 다시 보고 공부 꼭 해라
'''
data2=[19,2,31,45,30,11,121,27]
mid=len(data2)//2 # 중간 값
# 정렬할 데이터의 개수에 따라서 회전 수가 달라지므로 정렬할 데이터의 중간 위치가 0보다 큰 동안 반복하게 한다.
while mid>0:
    for i in range(mid,len(data2)): # 데이터 끝까지 돈다.
        key2 = data2[i]
        index = i  # 이건 삽입 정렬과 동일
        while index >= mid and data2[index-mid] >key2 : # index - mid 가 맨 앞 값 즉, 비교하는 위치이다.
            data2[index]=data2[index-mid]
            index-=mid                               # 삽입 정렬과 동일한 느낌 ㅇㅋ?
        data2[index]=key2
    print(data2) 
    mid//=2   
print('최종 : {}'.format(data2))





































